C51 COMPILER V9.59.0.0   F0_M2                                                             04/05/2021 16:58:03 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE F0_M2
OBJECT MODULE PLACED IN .\Objects\F0_M2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE F0_M2.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\F0_M2.lst) TABS(2) OBJECT(.\Objects\F0_M2.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F0_M2
   3          //-----------------------------------------------------------------------------
   4          // AUTH: 
   5          // DATE: 
   6          //
   7          // Target: C8051F02x
   8          // Tool chain: KEIL Microvision 4
   9          //
  10          //-----------------------------------------------------------------------------
  11          #include <C8051F020.h>
  12          #include "c8051F020_SFR16.h"
  13          #include "FO_M2__Structures_COMMANDES_INFORMATIONS_Serializer.h"
  14          #include <F0_M2.h>
  15          #include <stdio.h>
  16          #include <string.h>
  17          #include <stdlib.h>
  18          
  19          #define RX_LENGTH    16                // length of UART RX buffer
  20          
  21          // Initialisation Structures :
  22          struct COMMANDES_SERIALIZER Envoi;
  23          struct INFORMATIONS_SERIALIZER Reception;
  24          
  25          char bit_reception_UART1;
  26          int iter_M2 = 0;
  27          char xdata commandes_M2[35];
  28          char* ptr_commande;
  29          char xdata nom_commandes_M2[35];
  30          char argument1[10] = "";
  31          char argument2[10] = "";
  32          char argument3[10] = "";
  33          char argument4[10] = "";
  34          
  35          //-----------------------------------------------------------------------------
  36          // Fonctions UART et d'envoie
  37          //-----------------------------------------------------------------------------
  38          
  39          void Send_char_M2(char c)
  40          {
  41   1        
  42   1        //Desactive reception!
  43   1        SCON1 &= 0xEF; //REN1 = 0;
  44   1        SBUF1 = c;
  45   1        
  46   1        //Attente fin de transmission
  47   1        while((SCON1 & 0x02)==0x00){} //TI1 == 0
  48   1          
  49   1        //Remise � 0 du flag d'envoi une fois qu'on est sur que le caractere a �t� transmis
  50   1        SCON1 &= 0xFD; //TI1 = 0;
  51   1        SCON1 |= 0x10; //REN1 = 1;
  52   1      }
  53          
  54          void Send_string_M2(char* mot)
C51 COMPILER V9.59.0.0   F0_M2                                                             04/05/2021 16:58:03 PAGE 2   

  55          {
  56   1        
  57   1        //Tant qu'on n'a pas fini de lire toute la chaine
  58   1          while (*mot != '\0'){
  59   2              
  60   2              //Check si on est en train de lire le dernier caractere
  61   2              if(*(mot+1) == '\0'){
  62   3                  Send_char_M2(*mot);
  63   3                  Send_char_M2(0x0D); //<CR>
  64   3                  Send_char_M2('\n');
  65   3              }
  66   2              
  67   2              else {
  68   3                  Send_char_M2(*mot);
  69   3              }
  70   2              
  71   2              //Incremente la case memoire de lecture
  72   2              mot++;
  73   2          }
  74   1          Send_char_M2('\n');
  75   1      }
  76          
  77          char extraction(char* ptr_buffer)
  78          {
  79   1          if(*ptr_commande == '\r' || *ptr_commande == '\0'){
  80   2              return 0;
  81   2          }
  82   1      
  83   1          //Tant qu'on n'est pas a la fin de la chaine
  84   1          while(*ptr_commande != '\r' && *ptr_commande != '\0' && *ptr_commande != ':'){
  85   2              //On ecrit le caractere de le buffer
  86   2              *ptr_buffer = *ptr_commande;
  87   2              *(ptr_buffer+1) = '\0';
  88   2              ptr_commande++;
  89   2              ptr_buffer++;
  90   2          }
  91   1      
  92   1          //Fin de chaine sans suite
  93   1          if(*ptr_commande == '\r' || *ptr_commande == '\0'){
  94   2              return 0;
  95   2          }
  96   1          
  97   1          //Il y a une suite (espace)
  98   1          return 1;
  99   1      }
 100          
 101          char extraction_arguments()
 102          {
 103   1          char continuer;
 104   1          ptr_commande = &commandes_M2[0];
 105   1          strcpy(argument1, "");
 106   1          strcpy(argument2, "");
 107   1          strcpy(argument3, "");
 108   1          strcpy(argument4, "");
 109   1      
 110   1          continuer = extraction(argument1);
 111   1          if (continuer != 1){
 112   2              return continuer;
 113   2          }
 114   1      
 115   1          continuer = extraction(argument2);
 116   1          if (continuer != 1){
C51 COMPILER V9.59.0.0   F0_M2                                                             04/05/2021 16:58:03 PAGE 3   

 117   2              return continuer;
 118   2          }
 119   1      
 120   1          continuer = extraction(argument3);
 121   1          if (continuer != 1){
 122   2              return continuer;
 123   2          }
 124   1      
 125   1          continuer = extraction(argument4);
 126   1          if (continuer != 1){
 127   2              return continuer;
 128   2          }
 129   1      
 130   1          return 0;
 131   1      }
 132          
 133          //-----------------------------------------------------------------------------
 134          // Fonctions Convertion String vers Structure
 135          //-----------------------------------------------------------------------------
 136          
 137          struct INFORMATIONS_SERIALIZER recuperation_structure_serializer(struct INFORMATIONS_SERIALIZER STRUCT_SER
             -IALIZER)
 138          {
 139   1        if ((SCON1 & 0x01)==0x01) //(RI1 == 1)
 140   1          {
 141   2              SCON1 &= 0xFE; //RI1 = 0;
 142   2              SCON1 &= 0xEF; //REN1 = 0;
 143   2                  
 144   2              // Récupération du char dans le buffer
 145   2              bit_reception_UART1 = SBUF1;
 146   2            
 147   2          if(bit_reception_UART1 != '>' && bit_reception_UART1 != '\n')
 148   2              {
 149   3                  commandes_M2[iter_M2] = bit_reception_UART1;
 150   3                  commandes_M2[iter_M2+1] = '\0';
 151   3                  iter_M2++;
 152   3            }
 153   2      
 154   2              if (bit_reception_UART1 == '\r')
 155   2              {
 156   3                  STRUCT_SERIALIZER = F0_M2_fct_decodage(STRUCT_SERIALIZER);
 157   3              }
 158   2      
 159   2              SCON1 |= 0x10; //REN1 = 1;
 160   2        }
 161   1        return STRUCT_SERIALIZER; 
 162   1      }
 163          
 164          struct INFORMATIONS_SERIALIZER F0_M2_fct_decodage(struct INFORMATIONS_SERIALIZER STRUCT_INFOS)
 165          {
 166   1        extraction_arguments();
 167   1      
 168   1        //Rep_getenc
 169   1        if (strcmp(nom_commandes_M2, "Rep_getenc_1_2") == 0){
 170   2          STRUCT_INFOS.Etat_Response = Rep_getenc;
 171   2          STRUCT_INFOS.Read_Val_enc_1 = atoi(argument1);
 172   2          STRUCT_INFOS.Read_Val_enc_2 = atoi(argument2);
 173   2          
 174   2        }
 175   1      
 176   1        //Rep_vpid
 177   1        else if (strcmp(nom_commandes_M2, "Rep_vpid") == 0){
C51 COMPILER V9.59.0.0   F0_M2                                                             04/05/2021 16:58:03 PAGE 4   

 178   2          STRUCT_INFOS.Etat_Response = Rep_vpid;
 179   2          STRUCT_INFOS.Read_P = atoi(argument1);
 180   2          STRUCT_INFOS.Read_I = atoi(argument2);
 181   2          STRUCT_INFOS.Read_D = atoi(argument3);
 182   2          STRUCT_INFOS.Read_L_A = atoi(argument4);
 183   2          
 184   2        }
 185   1      
 186   1        //Rep_dpid
 187   1        else if (strcmp(nom_commandes_M2, "Rep_dpid") == 0){
 188   2          STRUCT_INFOS.Etat_Response = Rep_dpid;
 189   2          STRUCT_INFOS.Read_P = atoi(argument1);
 190   2          STRUCT_INFOS.Read_I = atoi(argument2);
 191   2          STRUCT_INFOS.Read_D = atoi(argument3);
 192   2          STRUCT_INFOS.Read_L_A = atoi(argument4);
 193   2      
 194   2        }
 195   1      
 196   1        //Rep_pids
 197   1        else if (strcmp(nom_commandes_M2, "Rep_pids") == 0){
 198   2          STRUCT_INFOS.Etat_Response = Rep_pids;
 199   2          STRUCT_INFOS.Read_Pids = atoi(argument1);
 200   2        }
 201   1      
 202   1        //Rep_vel
 203   1        else if (strcmp(nom_commandes_M2, "Rep_vel") == 0){
 204   2          STRUCT_INFOS.Etat_Response = Rep_vel;
 205   2          STRUCT_INFOS.Read_Vitesse_mot1 = atoi(argument1);
 206   2          STRUCT_INFOS.Read_Vitesse_mot2 = atoi(argument2);
 207   2        }
 208   1      
 209   1        return STRUCT_INFOS;
 210   1      }
 211          
 212          //-----------------------------------------------------------------------------
 213          // Fonctions Convertion Structure vers String
 214          //-----------------------------------------------------------------------------
 215          
 216          void F0_M2_fct_encodage(struct COMMANDES_SERIALIZER structure)
 217          {
 218   1        char Message[50]="";
 219   1        char Tampon[10];
 220   1        strcpy(Message, "");
 221   1      
 222   1          //Reset
 223   1        if (structure.Etat_Commande == Reset)
 224   1          {
 225   2          strcat(Message,"reset");
 226   2        }
 227   1      
 228   1          //Stop
 229   1        if (structure.Etat_Commande == Stop){
 230   2          strcat(Message,"stop");
 231   2        }
 232   1      
 233   1        //mogo_1
 234   1        if (structure.Etat_Commande == mogo_1)
 235   1          {
 236   2          strcat(Message,"mogo 1:");
 237   2          sprintf(Tampon,"%d", (int)structure.Vitesse_Mot1); //char 
 238   2          strcat(Message,Tampon);
 239   2        }
C51 COMPILER V9.59.0.0   F0_M2                                                             04/05/2021 16:58:03 PAGE 5   

 240   1      
 241   1        //mogo_2
 242   1        if (structure.Etat_Commande == mogo_2)
 243   1          {
 244   2          strcat(Message,"mogo 2:");
 245   2          sprintf(Tampon,"%d",structure.Vitesse_Mot2);
 246   2          strcat(Message,Tampon);
 247   2        }
 248   1      
 249   1        //mogo_1_2
 250   1        if (structure.Etat_Commande == mogo_1_2)
 251   1          {
 252   2          strcat(Message,"mogo 1:");
 253   2          sprintf(Tampon,"%d",structure.Vitesse_Mot1);
 254   2          strcat(Message,Tampon);
 255   2          strcat(Message," 2:");
 256   2          sprintf(Tampon,"%d",structure.Vitesse_Mot2);
 257   2          strcat(Message,Tampon);   
 258   2        }
 259   1      
 260   1        //Vpid_read
 261   1        if (structure.Etat_Commande == Vpid_read)
 262   1          {
 263   2          strcat(Message,"vpid"); 
 264   2                          
 265   2          //Prepare de quoi reconnaitre la reponse
 266   2          strcpy(nom_commandes_M2, "Rep_vpid");
 267   2        }
 268   1      
 269   1        //Vpid_set
 270   1        if (structure.Etat_Commande == Vpid_set)
 271   1          {
 272   2          strcat(Message,"vpid ");
 273   2          sprintf(Tampon,"%d:",structure.Set_P);
 274   2          strcat(Message,Tampon);
 275   2          sprintf(Tampon,"%d:",structure.Set_I);
 276   2          strcat(Message,Tampon);
 277   2          sprintf(Tampon,"%d:",structure.Set_D);
 278   2          strcat(Message,Tampon);
 279   2          sprintf(Tampon,"%d",structure.Set_L_A);
 280   2          strcat(Message,Tampon);
 281   2        }
 282   1      
 283   1        //digo_1
 284   1        if (structure.Etat_Commande == digo_1)
 285   1          {
 286   2          strcat(Message,"digo 1:");
 287   2          sprintf(Tampon,"%d:",structure.Ticks_mot1);
 288   2          strcat(Message,Tampon);
 289   2          sprintf(Tampon,"%d",structure.Vitesse_Mot1);
 290   2          strcat(Message,Tampon);
 291   2        }
 292   1      
 293   1        //digo_2
 294   1        if (structure.Etat_Commande == digo_2)
 295   1          {
 296   2          strcpy(Message,"digo 2:");
 297   2          sprintf(Tampon,"%d:",structure.Ticks_mot2);
 298   2          strcat(Message,Tampon);
 299   2          sprintf(Tampon,"%d",structure.Vitesse_Mot2);
 300   2          strcat(Message,Tampon);
 301   2        }
C51 COMPILER V9.59.0.0   F0_M2                                                             04/05/2021 16:58:03 PAGE 6   

 302   1      
 303   1        //digo_1_2
 304   1        if (structure.Etat_Commande == digo_1_2)
 305   1          {
 306   2          strcpy(Message,"digo 1:");
 307   2          sprintf(Tampon,"%d:",structure.Ticks_mot1);
 308   2          strcat(Message,Tampon);
 309   2          sprintf(Tampon,"%d ",structure.Vitesse_Mot1);
 310   2          strcat(Message,Tampon);
 311   2          
 312   2          strcat(Message,"2:");
 313   2          sprintf(Tampon,"%d:",structure.Ticks_mot2);
 314   2          strcat(Message,Tampon);
 315   2          sprintf(Tampon,"%d",structure.Vitesse_Mot2);
 316   2          strcat(Message,Tampon);
 317   2        }
 318   1      
 319   1        //Dpid_read
 320   1        if (structure.Etat_Commande == Dpid_read)
 321   1          {
 322   2          strcat(Message,"Dpid_read");
 323   2                          
 324   2          //Prepare de quoi reconnaitre la reponse
 325   2          strcpy(nom_commandes_M2, "Rep_dpid");
 326   2        }
 327   1      
 328   1        //Dpid_set
 329   1        if (structure.Etat_Commande == Dpid_set)
 330   1          {
 331   2          strcat(Message,"dpid ");
 332   2          sprintf(Tampon,"%d:",structure.Set_P);
 333   2          strcat(Message,Tampon);
 334   2          sprintf(Tampon,"%d:",structure.Set_I);
 335   2          strcat(Message,Tampon);
 336   2          sprintf(Tampon,"%d:",structure.Set_D);
 337   2          strcat(Message,Tampon);
 338   2          sprintf(Tampon,"%d",structure.Set_L_A);
 339   2          strcat(Message,Tampon); 
 340   2        }
 341   1        
 342   1        //Rpid_Stinger
 343   1        if (structure.Etat_Commande == Rpid_Stinger){
 344   2          strcat(Message,"rpid s");
 345   2                  
 346   2          //Prepare de quoi reconnaitre la reponse
 347   2          strcpy(nom_commandes_M2, "Rep_rpid");
 348   2          }
 349   1      
 350   1          //Pids
 351   1        if (structure.Etat_Commande == Pids){
 352   2          strcat(Message,"pids");
 353   2          
 354   2          //Prepare de quoi reconnaitre la reponse
 355   2          strcpy(nom_commandes_M2, "Rep_pids");
 356   2        }
 357   1        
 358   1        //Getenc_1
 359   1        if (structure.Etat_Commande == Getenc_1)
 360   1          {
 361   2          strcat(Message,"getenc 1");
 362   2                    
 363   2          //Prepare de quoi reconnaitre la reponse
C51 COMPILER V9.59.0.0   F0_M2                                                             04/05/2021 16:58:03 PAGE 7   

 364   2          strcpy(nom_commandes_M2, "getenc_1");
 365   2        }
 366   1        
 367   1        //Getenc_2
 368   1        if (structure.Etat_Commande == Getenc_2){
 369   2          strcat(Message,"getenc 2");
 370   2                    
 371   2          //Prepare de quoi reconnaitre la reponse
 372   2          strcpy(nom_commandes_M2, "getenc_2");
 373   2        }
 374   1        
 375   1        //Getenc_1_2
 376   1        if (structure.Etat_Commande == Getenc_1_2){
 377   2          strcat(Message,"getenc 1 2");
 378   2            
 379   2          //Prepare de quoi reconnaitre la reponse
 380   2          strcpy(nom_commandes_M2, "getenc_1_2");
 381   2        }
 382   1        
 383   1        //Clrenc_1
 384   1        if (structure.Etat_Commande == Clrenc_1){
 385   2          strcat(Message,"clrenc 1");
 386   2        }
 387   1        
 388   1        //Clrenc_2
 389   1        if (structure.Etat_Commande == Clrenc_2){
 390   2          strcat(Message,"clrenc 2");
 391   2        }
 392   1        
 393   1        //Clrenc_1_2
 394   1        if (structure.Etat_Commande == Clrenc_1_2){
 395   2          strcat(Message,"clrenc 1 2");
 396   2        }
 397   1        
 398   1        //Vel
 399   1        if (structure.Etat_Commande == Vel){
 400   2          strcat(Message,"vel");
 401   2                    
 402   2          //Prepare de quoi reconnaitre la reponse
 403   2          strcpy(nom_commandes_M2, "vel");
 404   2        }
 405   1        
 406   1        //Restore
 407   1        if (structure.Etat_Commande == Restore){
 408   2          strcat(Message,"restore");
 409   2          
 410   2        }
 411   1        if(strcmp(Message, "") != 0){
 412   2          Send_string_M2(Message);
 413   2        }
 414   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2934    ----
   CONSTANT SIZE    =    309    ----
   XDATA SIZE       =    149     114
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.59.0.0   F0_M2                                                             04/05/2021 16:58:03 PAGE 8   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
