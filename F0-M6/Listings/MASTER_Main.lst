C51 COMPILER V9.59.0.0   MASTER_MAIN                                                       04/06/2021 12:30:38 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MASTER_MAIN
OBJECT MODULE PLACED IN .\Objects\MASTER_Main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MASTER_Main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\MASTER_Main.lst) TABS(2) OBJECT(.\Objects\MASTER_Main.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F0-M01.c
   3          //
   4          // Dernière Modification : 15/03/2021 (aucune erreur déclarées et 3 warnings) 
   5          // Auteur : 
   6          //  - Maxime LERICHE
   7          //  - Philippe CHARRAT
   8          // TODO : 
   9          //  - fonction d'erreur 
  10          //  - Convertion Struct to String 
  11          //  - 
  12          //-----------------------------------------------------------------------------
  13          
  14          // Import des bibliothèques ---
  15          #include <C8051F020.h>
  16          #include <stdio.h>
  17          #include <string.h>
  18          #include <stdlib.h>
  19          #include "c8051F020_SFR16.h"
  20          
  21          #include "MASTER_Config_Globale.h"
  22          
  23          #include "FO_M1__Structures_COMMANDES_INFORMATIONS_CentraleDeCommande.h"
  24          #include "FO_M2__Structures_COMMANDES_INFORMATIONS_Serializer.h"
  25          
  26          #include <F0_M1.h>
  27          #include <F0_M2.h>
  28          #include <F0_M3.h>
  29          #include <F0_M4.h>
  30          // ---
  31          
  32          // Prototypes de Fonctions
  33          
  34          // Variables générales
  35          
  36          // Partie : Interruption
  37            
  38          //Variables globales
  39          char temps;
  40          char demande_pids = 0;
  41          // 
  42          unsigned int distance;
  43          
  44          
  45          // Strucutre 
  46          struct COMMANDES commandeCentraleCommande = {
  47              Epreuve_non,
  48              Mouvement_non, 20, 0, 0, 0,
  49              ACQ_non, 0,
  50              DCT_non, 0,
  51              Lumiere_non, 0, 0, 0, 0,
  52              Servo_non, 0,
  53              Energie_non,
  54              Position_non, 0, 0, 0,
C51 COMPILER V9.59.0.0   MASTER_MAIN                                                       04/06/2021 12:30:38 PAGE 2   

  55              Photo_non, 0, 0
  56            };
  57          
  58          struct INFORMATIONS informationsCentraleCommande = {
  59              Invite_non, "Message d'invite",
  60              BUT_Atteint_non,
  61              BUT_Servo_non,
  62              DCT_Obst_non, 0, 0,
  63              RESULT_Courant_non, 0,
  64              RESULT_Energie_non, 0,
  65              RESULT_Position_non, 0, 0, 0,
  66              Aux_non, "???"
  67            };
  68          
  69          struct COMMANDES_SERIALIZER commandeSerializer = {
  70            Commande_non,
  71            0,       
  72            0,
  73            0,              
  74            0,         
  75            0,           
  76            0,   
  77            0,        
  78            0,  
  79            };
  80          
  81          struct INFORMATIONS_SERIALIZER informationsSerializer = {
  82            Reponse_non,     
  83            0,           
  84            0,                
  85            0,                 
  86            0,                    
  87            0,                    
  88            0,                 
  89            0,                   
  90            0,          
  91            0,       
  92            };
  93          //-----------------------------------------------------------------------------
  94          // MAIN Routine
  95          //-----------------------------------------------------------------------------
  96          
  97          void main (void) {
  98   1        // Appel des configurations globales
  99   1        Init_Device();
 100   1        Send_string_UART0("SYSTEME OK !\n\0");
 101   1      
 102   1        while (1)
 103   1        {
 104   2          commandeCentraleCommande = recuperation_structure_commande(commandeCentraleCommande);
 105   2          informationsSerializer = recuperation_structure_serializer(informationsSerializer);
 106   2          // Modif philippe 
 107   2          informationsCentraleCommande.Etat_Invite = Invite_non;
 108   2          
 109   2          // ------------------------- Gestion de l'epreuvre ---------------------------------------------
 110   2          
 111   2          switch (commandeCentraleCommande.Etat_Epreuve)
 112   2              {
 113   3                // cas : d'arret d'urgence ?
 114   3              case epreuve1:
 115   3                informationsCentraleCommande.Etat_Invite = Invite_oui;
 116   3                informationsCentraleCommande.MSG_Invit = "Epreuve 1 start !\0";
C51 COMPILER V9.59.0.0   MASTER_MAIN                                                       04/06/2021 12:30:38 PAGE 3   

 117   3                commandeCentraleCommande.Etat_Epreuve = Fin_Epreuve;
 118   3                break;
 119   3              
 120   3              case epreuve2:
 121   3                informationsCentraleCommande.Etat_Invite = Invite_oui;
 122   3                informationsCentraleCommande.MSG_Invit = "Epreuve 2 start !\0";
 123   3                commandeCentraleCommande.Etat_Epreuve = Fin_Epreuve;
 124   3                break;
 125   3              
 126   3              case epreuve3:
 127   3                informationsCentraleCommande.Etat_Invite = Invite_oui;
 128   3                informationsCentraleCommande.MSG_Invit = "Epreuve 3 start !\0";
 129   3                commandeCentraleCommande.Etat_Epreuve = Fin_Epreuve;
 130   3                break;
 131   3              
 132   3              case epreuve4:
 133   3                informationsCentraleCommande.Etat_Invite = Invite_oui;        
 134   3                informationsCentraleCommande.MSG_Invit = "Epreuve 4 start !\0";
 135   3                commandeCentraleCommande.Etat_Epreuve = Fin_Epreuve;
 136   3                break;
 137   3              
 138   3              case epreuve5:
 139   3                informationsCentraleCommande.Etat_Invite = Invite_oui;
 140   3                informationsCentraleCommande.MSG_Invit = "Epreuve 5 start !\0";         
 141   3                commandeCentraleCommande.Etat_Epreuve = Fin_Epreuve;
 142   3                break;
 143   3              
 144   3              case epreuve6:
 145   3                informationsCentraleCommande.Etat_Invite = Invite_oui;
 146   3                informationsCentraleCommande.MSG_Invit = "Epreuve 6 start !\0";
 147   3                commandeCentraleCommande.Etat_Epreuve = Fin_Epreuve;
 148   3                break;
 149   3              
 150   3              case epreuve7:
 151   3                informationsCentraleCommande.Etat_Invite = Invite_oui;
 152   3                informationsCentraleCommande.MSG_Invit = "Epreuve 7 start !\0";
 153   3                commandeCentraleCommande.Etat_Epreuve = Fin_Epreuve;
 154   3                break;
 155   3      
 156   3              case epreuve8:
 157   3                informationsCentraleCommande.Etat_Invite = Invite_oui;
 158   3                informationsCentraleCommande.MSG_Invit = "Epreuve 8 start !\0";         
 159   3                commandeCentraleCommande.Etat_Epreuve = Fin_Epreuve;
 160   3                break;
 161   3              
 162   3              case Fin_Epreuve:
 163   3                informationsCentraleCommande.Etat_Invite = Invite_oui;
 164   3                informationsCentraleCommande.MSG_Invit = "Epreuve end !";         
 165   3                commandeCentraleCommande.Etat_Epreuve = Epreuve_non;
 166   3                break;
 167   3              
 168   3              default:
 169   3                  break;
 170   3              }
 171   2          
 172   2          // ------------------------- Gestion du type de mouvement ---------------------------------------------
 173   2      
 174   2          if (commandeCentraleCommande.Etat_Mouvement == Stopper)
 175   2          {
 176   3              commandeSerializer.Etat_Commande = Stop;
 177   3              commandeCentraleCommande.Etat_Mouvement = Mouvement_non;
 178   3          }
C51 COMPILER V9.59.0.0   MASTER_MAIN                                                       04/06/2021 12:30:38 PAGE 4   

 179   2          else if(commandeCentraleCommande.Etat_Mouvement != Mouvement_non)
 180   2          {
 181   3            //Demande si les moteurs sont deja utilises
 182   3            if(demande_pids == 0)
 183   3            {
 184   4              commandeSerializer.Etat_Commande = Pids;
 185   4              demande_pids = 1;
 186   4            }
 187   3            // Si on recu la reponse du if precedent
 188   3            else if(informationsSerializer.Etat_Response == Rep_pids)
 189   3            {
 190   4              demande_pids = 0;
 191   4              informationsSerializer.Etat_Response = Reponse_non;
 192   4              if(informationsSerializer.Read_Pids == 0)
 193   4              {
 194   5                switch(commandeCentraleCommande.Etat_Mouvement)
 195   5                {
 196   6                case Avancer:
 197   6                  commandeSerializer.Etat_Commande = mogo_1_2;
 198   6                  commandeSerializer.Vitesse_Mot1 = (commandeCentraleCommande.Vitesse*28)/100;
 199   6                  commandeSerializer.Vitesse_Mot2 = (commandeCentraleCommande.Vitesse*28)/100;
 200   6      
 201   6                  commandeCentraleCommande.Etat_Mouvement = Mouvement_non;
 202   6                  break;
 203   6                case Reculer:
 204   6                  commandeSerializer.Etat_Commande = mogo_1_2;
 205   6                  commandeSerializer.Vitesse_Mot1 = -(commandeCentraleCommande.Vitesse*28)/100;
 206   6                  commandeSerializer.Vitesse_Mot2 = -(commandeCentraleCommande.Vitesse*28)/100;
 207   6      
 208   6                  commandeCentraleCommande.Etat_Mouvement = Mouvement_non;
 209   6                  break;
 210   6                case Rot_90D:
 211   6                  commandeSerializer.Etat_Commande = digo_1_2;
 212   6                  commandeSerializer.Ticks_mot1 = (90/180) * 100;
 213   6                  commandeSerializer.Ticks_mot2 = (90/180) * 100;
 214   6                  commandeSerializer.Vitesse_Mot1 = 10;
 215   6                  commandeSerializer.Vitesse_Mot2 = -10;
 216   6      
 217   6                  commandeCentraleCommande.Etat_Mouvement = Mouvement_non;
 218   6                  break;
 219   6                case Rot_90G:
 220   6                  commandeSerializer.Etat_Commande = digo_1_2;
 221   6                  commandeSerializer.Ticks_mot1 = (90/180) * 100;
 222   6                  commandeSerializer.Ticks_mot2 = (90/180) * 100;
 223   6                  commandeSerializer.Vitesse_Mot1 = -10;
 224   6                  commandeSerializer.Vitesse_Mot2 = 10;
 225   6      
 226   6                  commandeCentraleCommande.Etat_Mouvement = Mouvement_non;
 227   6                  break;
 228   6                case Rot_180D:
 229   6                  commandeSerializer.Etat_Commande = digo_1_2;
 230   6                  commandeSerializer.Ticks_mot1 = 100;
 231   6                  commandeSerializer.Ticks_mot2 = 100;
 232   6                  commandeSerializer.Vitesse_Mot1 = 10;
 233   6                  commandeSerializer.Vitesse_Mot2 = -10;
 234   6      
 235   6                  commandeCentraleCommande.Etat_Mouvement = Mouvement_non;
 236   6                  break;
 237   6                case Rot_180G:
 238   6                  commandeSerializer.Etat_Commande = digo_1_2;
 239   6                  commandeSerializer.Ticks_mot1 = 100;
 240   6                  commandeSerializer.Ticks_mot2 = 100;
C51 COMPILER V9.59.0.0   MASTER_MAIN                                                       04/06/2021 12:30:38 PAGE 5   

 241   6                  commandeSerializer.Vitesse_Mot1 = -10;
 242   6                  commandeSerializer.Vitesse_Mot2 = 10;
 243   6      
 244   6                  commandeCentraleCommande.Etat_Mouvement = Mouvement_non;
 245   6                  break;
 246   6                case Rot_AngD:
 247   6                  commandeSerializer.Etat_Commande = digo_1_2;
 248   6                  commandeSerializer.Ticks_mot1 = (abs(commandeCentraleCommande.Angle)/180) * 100;
 249   6                  commandeSerializer.Ticks_mot2 = (abs(commandeCentraleCommande.Angle)/180) * 100;
 250   6                  commandeSerializer.Vitesse_Mot1 = 10;
 251   6                  commandeSerializer.Vitesse_Mot2 = -10;
 252   6      
 253   6                  commandeCentraleCommande.Etat_Mouvement = Mouvement_non;
 254   6                  break;
 255   6                case Rot_AngG:
 256   6                  commandeSerializer.Etat_Commande = digo_1_2;
 257   6                  commandeSerializer.Ticks_mot1 = (abs(commandeCentraleCommande.Angle)/180) * 100;
 258   6                  commandeSerializer.Ticks_mot2 = (abs(commandeCentraleCommande.Angle)/180) * 100;
 259   6                  commandeSerializer.Vitesse_Mot1 = -10;
 260   6                  commandeSerializer.Vitesse_Mot2 = 10;
 261   6      
 262   6                  commandeCentraleCommande.Etat_Mouvement = Mouvement_non;
 263   6                  break;
 264   6                case Depl_Coord:
 265   6                  // A faire !
 266   6                  if(commandeCentraleCommande.Pos_Coord_X = commandeCentraleCommande.Coord_X)
 267   6                  {
 268   7                    if(commandeCentraleCommande.Pos_Coord_Y = commandeCentraleCommande.Coord_Y)
 269   7                    {
 270   8                      if(commandeCentraleCommande.Pos_Angle = commandeCentraleCommande.Angle)
 271   8                      {
 272   9                        commandeCentraleCommande.Etat_Mouvement = Mouvement_non;
 273   9                      }
 274   8                    }
 275   7                  }
 276   6                  break;
 277   6                default:
 278   6                  break;
 279   6                }
 280   5              }
 281   4            }
 282   3            else
 283   3            {
 284   4              commandeSerializer.Etat_Commande = Commande_non;
 285   4            }
 286   3          }
 287   2          switch (commandeCentraleCommande.Etat_ACQ_Son)
 288   2              {
 289   3              case ACQ_oui:
 290   3            //AS1   
 291   3                  break;
 292   3              default:
 293   3                  break;
 294   3              }
 295   2      
 296   2              switch (commandeCentraleCommande.Etat_DCT_Obst)
 297   2              {
 298   3              case oui_180:
 299   3            //M3 & M4
 300   3                  break;
 301   3              case oui_360:
 302   3            //M3 & M4
C51 COMPILER V9.59.0.0   MASTER_MAIN                                                       04/06/2021 12:30:38 PAGE 6   

 303   3                  break;
 304   3              default:
 305   3                  break;
 306   3              }
 307   2      
 308   2              switch (commandeCentraleCommande.Etat_Lumiere)
 309   2              {
 310   3              case Allumer:
 311   3            //MS1 && S6 && S1
 312   3                  break;
 313   3              case Eteindre:
 314   3            //MS1 && S6 && S1
 315   3                  break;
 316   3              default:
 317   3                  break;
 318   3              }
 319   2      
 320   2              switch (commandeCentraleCommande.Etat_Servo)
 321   2              {
 322   3              case Servo_H:
 323   3                  //M3
 324   3                  break;
 325   3              case Servo_V:
 326   3            //S3
 327   3                  break;
 328   3              default:
 329   3                  break;
 330   3              }
 331   2      
 332   2              switch (commandeCentraleCommande.Etat_Energie)
 333   2              {
 334   3              case Mesure_I:
 335   3            //M5
 336   3                  break;
 337   3              case Mesure_E:
 338   3            //M5
 339   3                  break;
 340   3              default:
 341   3                  break;
 342   3              }
 343   2      
 344   2          switch (commandeCentraleCommande.Etat_Position)
 345   2              {
 346   3              case Init_Position:
 347   3      
 348   3                  break;
 349   3              case Demande_Position:
 350   3            //envoi la position actuelle
 351   3            informationsCentraleCommande.Etat_RESULT_Position = RESULT_Position_oui;
 352   3            commandeCentraleCommande.Etat_Position = Position_non;
 353   3                  break;
 354   3              default:
 355   3                  break;
 356   3              }
 357   2      
 358   2              switch (commandeCentraleCommande.Etat_Photo)
 359   2              {
 360   3              case Photo_1:
 361   3      
 362   3                  break;
 363   3              case Photo_Multiple:
 364   3      
C51 COMPILER V9.59.0.0   MASTER_MAIN                                                       04/06/2021 12:30:38 PAGE 7   

 365   3                  break;
 366   3              case Photo_continue:
 367   3      
 368   3                  break;
 369   3              case Photo_stop:
 370   3      
 371   3                  break;
 372   3              default:
 373   3                  break;
 374   3              }
 375   2          Convertion_A_to_S(informationsCentraleCommande);
 376   2          
 377   2        }
 378   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    938    ----
   CONSTANT SIZE    =    202    ----
   XDATA SIZE       =     90    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
